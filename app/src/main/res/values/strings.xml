<resources>
    <string name="app_name">Ashu</string>
    <string name="textview">Computer programming is the process of designing and building an executable computer program to accomplish a specific computing result or to perform a specific task. Programming involves tasks such as: analysis, generating algorithms, profiling algorithms\' accuracy and resource consumption, and the implementation of algorithms in a chosen programming language (commonly referred to as coding).[1][2] The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit. The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem. Proficient programming thus often requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.

Tasks accompanying and related to programming include: testing, debugging, source code maintenance, implementation of build systems, and management of derived artifacts, such as the machine code of computer programs. These might be considered part of the programming process, but often the term software development is used for this larger process with the term programming, implementation, or coding reserved for the actual writing of code. Software engineering combines engineering techniques with software development practices. Reverse engineering is a related process used by designers, analysts and programmers to understand and re-create/re-implement.[3]:3
        Compiler languages
High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware. FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957[12] and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.

These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target for varying machine instruction sets via compilation declarations and heuristics. The first compiler for a programming language was developed by Grace Hopper.[13] When Hopper went to work on UNIVAC in 1949, she brought the idea of using compilers with her.[14][15] Compilers harness the power of computers to make programming easier[12] by allowing programmers to specify calculations by entering a formula using infix notation (e.g., Y = X*2 + 5*X + 9) for example. FORTRAN, the first widely used high-level language to have a functional implementation which permitted the abstraction of reusable blocks of code, came out in 1957[12] and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research. In 1951 Frances E. Holberton developed the first sort-merge generator, which ran on the UNIVAC I.[16] Another woman working at UNIVAC, Adele Mildred Koss, developed a program that was a precursor to report generators.[16] The idea for the creation of COBOL started in 1959 when Mary K. Hawes, who worked for the Burroughs Corporation, set up a meeting to discuss creating a common business language.[17] She invited six people, including Grace Hopper.[17] Hopper was involved in developing COBOL as a business language and creating "self-documenting" programming.[18][19] Hopper\'s contribution to COBOL was based on her programming language, called FLOW-MATIC.[15] In 1961, Jean E. Sammet developed FORMAC and also published Programming Languages: History and Fundamentals, which went on to be a standard work on programming languages.



  </string>
</resources>